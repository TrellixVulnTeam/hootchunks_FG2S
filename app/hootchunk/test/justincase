
import pytest
import sys, os, tempfile, io
from hootchunk import hootchunk 
from hootchunk import hooterrors

@pytest.fixture(scope="session")
def gen_file(filename='temp.txt', location='tmp', size=1048576, chunksize=999):
    if chunksize == None:
        chunksize = 10*1024*1024
    # file=(io.BytesIO(os.urandom(chunksize)), 'temp.txt') 
    with open('/{0}/{1}'.format(location, filename), 'wb') as target:
        while size > chunksize:
            target.write(os.urandom(chunksize))
            size -= chunksize
        target.write(os.urandom(size))
    return '/{0}/{1}'.format(location, filename)

@pytest.fixture(scope="session")
def return_file_key():
    # file_loc = gen_file
    returned = hootchunk.WriteToCache(gen_file)
    assert type(returned) == io.BytesIO
    return returned

def test_write_giant_file():
    file = '/{0}/{1}'.format('temp1.txt','tmp')
    with pytest.raises(Exception) as  excinfo:
        with open(file), 'wb') as target:
        while 104857600 > chunksize:
            target.write(os.urandom(chunksize))
            104857600 -= chunksize
        target.write(os.urandom(104857600))

        returned = hootchunk.WriteToCache(file)
        assert 'FileError' in returned
    clean_file('temp1.txt','tmp')

def test_write_file():
    # hootchunk.FlushCache()
    file = gen_file('temp1.txt','tmp',1048576)
    returned = hootchunk.WriteToCache(file)
    print(returned)
    deleted = hootchunk.DeleteKey(returned)
    assert 'temp1.txt' in returned
    assert 'tmp' not in returned
    # assert deleted == True

    
# def test_get_files(client):
#     resp = client.get('/hootcache/api/v1.0/files')
#     print(resp)
#     assert 'cached_files' in resp.data.decode('utf-8')

# def test_post_file(client):

#     data = dict(
#         file=(io.BytesIO(b'my file contents'), 'temp.txt') )

#     response = client.post(
#        '/hootcache/api/v1.0/files/temp.txt', data=data, follow_redirects=True,
#         content_type='multipart/form-data'
#     )

#     assert 'Your item has been saved.', response.data or  'KeyCollision' in str(excinfo.value)
    

# def test_get_file(client):
#     resp = client.get('/hootcache/api/v1.0/files/temp.txt')
#     print(resp)
#     assert 'cached_files' in resp.data.decode('utf-8')

